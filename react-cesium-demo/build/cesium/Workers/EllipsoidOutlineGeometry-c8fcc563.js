define(["exports","./GeometryOffsetAttribute-1772960d","./Transforms-d5c6ad6e","./Matrix2-ccd5b911","./ComponentDatatype-93750d1a","./when-4bbc8319","./RuntimeError-346a3079","./GeometryAttribute-c30799b8","./GeometryAttributes-7827a6c2","./IndexDatatype-b7d979a6"],(function(i,t,e,a,n,r,o,s,m,u){"use strict";var f=new a.Cartesian3(1,1,1),d=Math.cos,l=Math.sin;function c(i){i=r.defaultValue(i,r.defaultValue.EMPTY_OBJECT);var t=r.defaultValue(i.radii,f),e=r.defaultValue(i.innerRadii,t),o=r.defaultValue(i.minimumClock,0),s=r.defaultValue(i.maximumClock,n.CesiumMath.TWO_PI),m=r.defaultValue(i.minimumCone,0),u=r.defaultValue(i.maximumCone,n.CesiumMath.PI),d=Math.round(r.defaultValue(i.stackPartitions,10)),l=Math.round(r.defaultValue(i.slicePartitions,8)),c=Math.round(r.defaultValue(i.subdivisions,128));this._radii=a.Cartesian3.clone(t),this._innerRadii=a.Cartesian3.clone(e),this._minimumClock=o,this._maximumClock=s,this._minimumCone=m,this._maximumCone=u,this._stackPartitions=d,this._slicePartitions=l,this._subdivisions=c,this._offsetAttribute=i.offsetAttribute,this._workerName="createEllipsoidOutlineGeometry"}c.packedLength=2*a.Cartesian3.packedLength+8,c.pack=function(i,t,e){return e=r.defaultValue(e,0),a.Cartesian3.pack(i._radii,t,e),e+=a.Cartesian3.packedLength,a.Cartesian3.pack(i._innerRadii,t,e),e+=a.Cartesian3.packedLength,t[e++]=i._minimumClock,t[e++]=i._maximumClock,t[e++]=i._minimumCone,t[e++]=i._maximumCone,t[e++]=i._stackPartitions,t[e++]=i._slicePartitions,t[e++]=i._subdivisions,t[e]=r.defaultValue(i._offsetAttribute,-1),t};var C=new a.Cartesian3,_=new a.Cartesian3,p={radii:C,innerRadii:_,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,subdivisions:void 0,offsetAttribute:void 0};c.unpack=function(i,t,e){t=r.defaultValue(t,0);var n=a.Cartesian3.unpack(i,t,C);t+=a.Cartesian3.packedLength;var o=a.Cartesian3.unpack(i,t,_);t+=a.Cartesian3.packedLength;var s=i[t++],m=i[t++],u=i[t++],f=i[t++],d=i[t++],l=i[t++],h=i[t++];t=i[t];return r.defined(e)?(e._radii=a.Cartesian3.clone(n,e._radii),e._innerRadii=a.Cartesian3.clone(o,e._innerRadii),e._minimumClock=s,e._maximumClock=m,e._minimumCone=u,e._maximumCone=f,e._stackPartitions=d,e._slicePartitions=l,e._subdivisions=h,e._offsetAttribute=-1===t?void 0:t,e):(p.minimumClock=s,p.maximumClock=m,p.minimumCone=u,p.maximumCone=f,p.stackPartitions=d,p.slicePartitions=l,p.subdivisions=h,p.offsetAttribute=-1===t?void 0:t,new c(p))},c.createGeometry=function(i){var o=i._radii;if(!(o.x<=0||o.y<=0||o.z<=0)){var f=i._innerRadii;if(!(f.x<=0||f.y<=0||f.z<=0)){var c=i._minimumClock,C=i._maximumClock,_=i._minimumCone,p=i._maximumCone,h=i._subdivisions,y=a.Ellipsoid.fromCartesian3(o),v=i._slicePartitions+1,b=i._stackPartitions+1;(v=Math.round(v*Math.abs(C-c)/n.CesiumMath.TWO_PI))<2&&(v=2),(b=Math.round(b*Math.abs(p-_)/n.CesiumMath.PI))<2&&(b=2);var k=0,x=1,A=f.x!==o.x||f.y!==o.y||f.z!==o.z,P=!1,w=!1;A&&(x=2,0<_&&(P=!0,k+=v),p<Math.PI&&(w=!0,k+=v));for(var M,V,g=h*x*(b+v),E=new Float64Array(3*g),G=u.IndexDatatype.createTypedArray(g,2*(g+k-(v+b)*x)),O=0,D=new Array(b),I=new Array(b),T=0;T<b;T++)D[T]=l(V=_+T*(p-_)/(b-1)),I[T]=d(V);var z=new Array(h),L=new Array(h);for(T=0;T<h;T++)z[T]=l(M=c+T*(C-c)/(h-1)),L[T]=d(M);for(T=0;T<b;T++)for(N=0;N<h;N++)E[O++]=o.x*D[T]*L[N],E[O++]=o.y*D[T]*z[N],E[O++]=o.z*I[T];if(A)for(T=0;T<b;T++)for(N=0;N<h;N++)E[O++]=f.x*D[T]*L[N],E[O++]=f.y*D[T]*z[N],E[O++]=f.z*I[T];for(D.length=h,I.length=h,T=0;T<h;T++)D[T]=l(V=_+T*(p-_)/(h-1)),I[T]=d(V);for(z.length=v,L.length=v,T=0;T<v;T++)z[T]=l(M=c+T*(C-c)/(v-1)),L[T]=d(M);for(T=0;T<h;T++)for(N=0;N<v;N++)E[O++]=o.x*D[T]*L[N],E[O++]=o.y*D[T]*z[N],E[O++]=o.z*I[T];if(A)for(T=0;T<h;T++)for(N=0;N<v;N++)E[O++]=f.x*D[T]*L[N],E[O++]=f.y*D[T]*z[N],E[O++]=f.z*I[T];for(T=O=0;T<b*x;T++)for(var R=T*h,N=0;N<h-1;N++)G[O++]=R+N,G[O++]=R+N+1;var B=b*h*x;for(T=0;T<v;T++)for(N=0;N<h-1;N++)G[O++]=B+T+N*v,G[O++]=B+T+(N+1)*v;if(A)for(B=b*h*x+v*h,T=0;T<v;T++)for(N=0;N<h-1;N++)G[O++]=B+T+N*v,G[O++]=B+T+(N+1)*v;if(A){var S=b*h*x,U=S+h*v;if(P)for(T=0;T<v;T++)G[O++]=S+T,G[O++]=U+T;if(w)for(S+=h*v-v,U+=h*v-v,T=0;T<v;T++)G[O++]=S+T,G[O++]=U+T}return A=new m.GeometryAttributes({position:new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:E})}),r.defined(i._offsetAttribute)&&(P=E.length,w=new Uint8Array(P/3),P=i._offsetAttribute===t.GeometryOffsetAttribute.NONE?0:1,t.arrayFill(w,P),A.applyOffset=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:w})),new s.Geometry({attributes:A,indices:G,primitiveType:s.PrimitiveType.LINES,boundingSphere:e.BoundingSphere.fromEllipsoid(y),offsetAttribute:i._offsetAttribute})}}},i.EllipsoidOutlineGeometry=c}));