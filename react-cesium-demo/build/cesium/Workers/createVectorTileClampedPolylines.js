define(["./AttributeCompression-1f045b73","./Matrix2-ccd5b911","./combine-83860057","./IndexDatatype-b7d979a6","./ComponentDatatype-93750d1a","./createTaskProcessorWorker","./RuntimeError-346a3079","./when-4bbc8319","./WebGLConstants-1c8239cc"],(function(a,e,t,r,s,n,i,o,d){"use strict";var c=32767,l=Math.cos(s.CesiumMath.toRadians(150)),f=new e.Cartographic,h=new e.Cartesian3,u=new e.Cartographic,C=new e.Cartographic;function p(a){var e=8*a,t=3*e,s=4*e;this.startEllipsoidNormals=new Float32Array(t),this.endEllipsoidNormals=new Float32Array(t),this.startPositionAndHeights=new Float32Array(s),this.startFaceNormalAndVertexCornerIds=new Float32Array(s),this.endPositionAndHeights=new Float32Array(s),this.endFaceNormalAndHalfWidths=new Float32Array(s),this.vertexBatchIds=new Uint16Array(e),this.indices=r.IndexDatatype.createTypedArray(e,36*a),this.vec3Offset=0,this.vec4Offset=0,this.batchIdOffset=0,this.indexOffset=0,this.volumeStartIndex=0}var m=new e.Cartesian3,b=new e.Cartesian3;function A(a,t,r,s,n){var i=e.Cartesian3.subtract(r,t,b);r=e.Cartesian3.subtract(t,a,m);return e.Cartesian3.normalize(i,i),e.Cartesian3.normalize(r,r),e.Cartesian3.dot(i,r)<l&&(r=e.Cartesian3.multiplyByScalar(r,-1,m)),e.Cartesian3.add(i,r,n),e.Cartesian3.equals(n,e.Cartesian3.ZERO)&&(n=e.Cartesian3.subtract(a,t)),e.Cartesian3.cross(n,s,n),e.Cartesian3.cross(s,n,n),e.Cartesian3.normalize(n,n),n}var w=[0,2,6,0,6,4,0,1,3,0,3,2,0,4,5,0,5,1,5,3,1,5,7,3,7,5,4,7,4,6,7,6,2,7,2,3],v=w.length,g=new e.Cartesian3,y=new e.Cartesian3,N=new e.Cartesian3,k=new e.Cartesian3,I=new e.Cartesian3;p.prototype.addVolume=function(a,t,r,s,n,i,o,d,c,l){for(var f=e.Cartesian3.add(t,c,g),h=l.geodeticSurfaceNormal(f,y),u=(f=e.Cartesian3.add(r,c,g),l.geodeticSurfaceNormal(f,k)),C=A(a,t,r,h,N),p=A(s,r,t,u,I),m=this.startEllipsoidNormals,b=this.endEllipsoidNormals,x=this.startPositionAndHeights,E=this.startFaceNormalAndVertexCornerIds,F=this.endPositionAndHeights,H=this.endFaceNormalAndHalfWidths,O=this.vertexBatchIds,P=this.batchIdOffset,D=this.vec3Offset,S=this.vec4Offset,M=0;M<8;M++)e.Cartesian3.pack(h,m,D),e.Cartesian3.pack(u,b,D),e.Cartesian3.pack(t,x,S),x[S+3]=n,e.Cartesian3.pack(r,F,S),F[S+3]=i,e.Cartesian3.pack(C,E,S),E[S+3]=M,e.Cartesian3.pack(p,H,S),H[S+3]=o,O[P++]=d,D+=3,S+=4;this.batchIdOffset=P,this.vec3Offset=D,this.vec4Offset=S;var R=this.indices,U=this.volumeStartIndex,B=this.indexOffset;for(M=0;M<v;M++)R[B+M]=w[M]+U;this.volumeStartIndex+=8,this.indexOffset+=v};var x=new e.Rectangle,E=new e.Ellipsoid,F=new e.Cartesian3,H=new e.Cartesian3,O=new e.Cartesian3,P=new e.Cartesian3,D=new e.Cartesian3;return n((function(n,i){var o=new Uint16Array(n.positions),d=new Uint16Array(n.widths),l=new Uint32Array(n.counts),m=new Uint16Array(n.batchIds),b=x,A=E,w=F,v=0,g=(k=new Float64Array(n.packedBuffer))[v++],y=k[v++];e.Rectangle.unpack(k,2,b),v+=e.Rectangle.packedLength,e.Ellipsoid.unpack(k,v,A),v+=e.Ellipsoid.packedLength,e.Cartesian3.unpack(k,v,w);var N=o.length/3,k=o.subarray(0,N),I=(v=o.subarray(N,2*N),o.subarray(2*N,3*N));a.AttributeCompression.zigZagDeltaDecode(k,v,I),function(a,t,r,s){for(var n=s.length,i=a.length,o=new Uint8Array(i),d=u,c=C,l=0,f=0;f<n;f++){for(var h=s[f],p=h,m=1;m<h;m++){var b=l+m,A=b-1;c.longitude=a[b],c.latitude=t[b],d.longitude=a[A],d.latitude=t[A],e.Cartographic.equals(c,d)&&(p--,o[A]=1)}s[f]=p,l+=h}for(var w=0,v=0;v<i;v++)1!==o[v]&&(a[w]=a[v],t[w]=t[v],r[w]=r[v],w++)}(k,v,I,l);for(var S=l.length,M=0,R=0;R<S;R++)M+=l[R]-1;var U=new p(M),B=function(a,t,r,n,i,o,d){for(var l=a.length,u=new Float64Array(3*l),C=0;C<l;++C){var p=a[C],m=t[C],b=r[C];p=s.CesiumMath.lerp(n.west,n.east,p/c),m=s.CesiumMath.lerp(n.south,n.north,m/c),b=s.CesiumMath.lerp(i,o,b/c),b=e.Cartographic.fromRadians(p,m,b,f),b=d.cartographicToCartesian(b,h);e.Cartesian3.pack(b,u,3*C)}return u}(k,v,I,b,g,y,A),T=(N=k.length,new Float32Array(3*N));for(R=0;R<N;++R)T[3*R]=B[3*R]-w.x,T[3*R+1]=B[3*R+1]-w.y,T[3*R+2]=B[3*R+2]-w.z;var V=0,W=0;for(R=0;R<S;R++){for(var z=l[R]-1,q=.5*d[R],L=m[R],_=V,G=0;G<z;G++){var Z=e.Cartesian3.unpack(T,V,O),Y=e.Cartesian3.unpack(T,V+3,P),j=I[W],J=I[W+1];j=s.CesiumMath.lerp(g,y,j/c),J=s.CesiumMath.lerp(g,y,J/c);W++;var K,Q,X,$=H,aa=D;0===G?(Q=e.Cartesian3.unpack(T,K=_+3*z,H),e.Cartesian3.equals(Q,Z)?e.Cartesian3.unpack(T,K-3,$):(X=e.Cartesian3.subtract(Z,Y,H),$=e.Cartesian3.add(X,Z,H))):e.Cartesian3.unpack(T,V-3,$),G===z-1?(X=e.Cartesian3.unpack(T,_,D),e.Cartesian3.equals(X,Y)?e.Cartesian3.unpack(T,_+3,aa):(X=e.Cartesian3.subtract(Y,Z,D),aa=e.Cartesian3.add(X,Y,D))):e.Cartesian3.unpack(T,V+6,aa),U.addVolume($,Z,Y,aa,j,J,q,L,w,A),V+=3}V+=3,W++}return k=U.indices,i.push(U.startEllipsoidNormals.buffer),i.push(U.endEllipsoidNormals.buffer),i.push(U.startPositionAndHeights.buffer),i.push(U.startFaceNormalAndVertexCornerIds.buffer),i.push(U.endPositionAndHeights.buffer),i.push(U.endFaceNormalAndHalfWidths.buffer),i.push(U.vertexBatchIds.buffer),i.push(k.buffer),k={indexDatatype:2===k.BYTES_PER_ELEMENT?r.IndexDatatype.UNSIGNED_SHORT:r.IndexDatatype.UNSIGNED_INT,startEllipsoidNormals:U.startEllipsoidNormals.buffer,endEllipsoidNormals:U.endEllipsoidNormals.buffer,startPositionAndHeights:U.startPositionAndHeights.buffer,startFaceNormalAndVertexCornerIds:U.startFaceNormalAndVertexCornerIds.buffer,endPositionAndHeights:U.endPositionAndHeights.buffer,endFaceNormalAndHalfWidths:U.endFaceNormalAndHalfWidths.buffer,vertexBatchIds:U.vertexBatchIds.buffer,indices:k.buffer},n.keepDecodedPositions&&(n=function(a){for(var e=a.length,t=new Uint32Array(e+1),r=0,s=0;s<e;++s)t[s]=r,r+=a[s];return t[e]=r,t}(l),i.push(B.buffer,n.buffer),k=t.combine(k,{decodedPositions:B.buffer,decodedPositionOffsets:n.buffer})),k}))}));