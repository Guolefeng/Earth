define(["./when-4bbc8319","./Matrix2-ccd5b911","./ArcType-98ec98bf","./arrayRemoveDuplicates-18786327","./Transforms-d5c6ad6e","./Color-d6975cd2","./ComponentDatatype-93750d1a","./RuntimeError-346a3079","./GeometryAttribute-c30799b8","./GeometryAttributes-7827a6c2","./IndexDatatype-b7d979a6","./PolylinePipeline-8457214f","./VertexFormat-71718faa","./combine-83860057","./WebGLConstants-1c8239cc","./EllipsoidGeodesic-19ea7553","./EllipsoidRhumbLine-aa9e6266","./IntersectionTests-4d6f5c54","./Plane-18bb00f8"],(function(e,t,r,a,o,n,i,l,s,p,c,d,u,y,m,f,h,v,C){"use strict";var g=[];function _(a){var o=(a=e.defaultValue(a,e.defaultValue.EMPTY_OBJECT)).positions,l=a.colors,s=e.defaultValue(a.width,1),p=e.defaultValue(a.colorsPerVertex,!1);this._positions=o,this._colors=l,this._width=s,this._colorsPerVertex=p,this._vertexFormat=u.VertexFormat.clone(e.defaultValue(a.vertexFormat,u.VertexFormat.DEFAULT)),this._arcType=e.defaultValue(a.arcType,r.ArcType.GEODESIC),this._granularity=e.defaultValue(a.granularity,i.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=t.Ellipsoid.clone(e.defaultValue(a.ellipsoid,t.Ellipsoid.WGS84)),this._workerName="createPolylineGeometry",o=1+o.length*t.Cartesian3.packedLength,o+=e.defined(l)?1+l.length*n.Color.packedLength:1,this.packedLength=o+t.Ellipsoid.packedLength+u.VertexFormat.packedLength+4}_.pack=function(r,a,o){var i;o=e.defaultValue(o,0);var l=r._positions,s=l.length;for(a[o++]=s,i=0;i<s;++i,o+=t.Cartesian3.packedLength)t.Cartesian3.pack(l[i],a,o);var p=r._colors;s=e.defined(p)?p.length:0;for(a[o++]=s,i=0;i<s;++i,o+=n.Color.packedLength)n.Color.pack(p[i],a,o);return t.Ellipsoid.pack(r._ellipsoid,a,o),o+=t.Ellipsoid.packedLength,u.VertexFormat.pack(r._vertexFormat,a,o),o+=u.VertexFormat.packedLength,a[o++]=r._width,a[o++]=r._colorsPerVertex?1:0,a[o++]=r._arcType,a[o]=r._granularity,a};var A=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),E=new u.VertexFormat,b={positions:void 0,colors:void 0,ellipsoid:A,vertexFormat:E,width:void 0,colorsPerVertex:void 0,arcType:void 0,granularity:void 0};_.unpack=function(r,a,o){a=e.defaultValue(a,0);for(var i=r[a++],l=new Array(i),s=0;s<i;++s,a+=t.Cartesian3.packedLength)l[s]=t.Cartesian3.unpack(r,a);var p=0<(i=r[a++])?new Array(i):void 0;for(s=0;s<i;++s,a+=n.Color.packedLength)p[s]=n.Color.unpack(r,a);var c=t.Ellipsoid.unpack(r,a,A);a+=t.Ellipsoid.packedLength;var d=u.VertexFormat.unpack(r,a,E);a+=u.VertexFormat.packedLength;var y=r[a++],m=1===r[a++],f=r[a++],h=r[a];return e.defined(o)?(o._positions=l,o._colors=p,o._ellipsoid=t.Ellipsoid.clone(c,o._ellipsoid),o._vertexFormat=u.VertexFormat.clone(d,o._vertexFormat),o._width=y,o._colorsPerVertex=m,o._arcType=f,o._granularity=h,o):(b.positions=l,b.colors=p,b.width=y,b.colorsPerVertex=m,b.arcType=f,b.granularity=h,new _(b))};var P=new t.Cartesian3,w=new t.Cartesian3,x=new t.Cartesian3,T=new t.Cartesian3;return _.createGeometry=function(l){var u,y,m=l._width,f=l._vertexFormat,h=l._colors,v=l._colorsPerVertex,C=l._arcType,_=l._granularity,A=l._ellipsoid,E=[],b=a.arrayRemoveDuplicates(l._positions,t.Cartesian3.equalsEpsilon,!1,E);if(e.defined(h)&&0<E.length&&(y=E[u=0],h=h.filter((function(e,t){return(v?t!==y&&(0!==t||1!==y):t+1!==y)||(y=E[++u],!1)}))),!((H=b.length)<2||m<=0)){if(C===r.ArcType.GEODESIC||C===r.ArcType.RHUMB){var D,k=C===r.ArcType.GEODESIC?(D=i.CesiumMath.chordLength(_,A.maximumRadius),d.PolylinePipeline.numberOfPoints):(D=_,d.PolylinePipeline.numberOfPointsRhumbLine),V=d.PolylinePipeline.extractHeights(b,A);if(e.defined(h)){for(var L=1,F=0;F<H-1;++F)L+=k(b[F],b[F+1],D);var G=new Array(L),O=0;for(F=0;F<H-1;++F){var R=b[F],I=b[F+1],S=h[F],B=k(R,I,D);if(v&&F<L)for(var U=function(e,t,r){var a=g;a.length=r;var o=e.red,i=e.green,l=e.blue,s=e.alpha,p=t.red,c=t.green,d=t.blue,u=t.alpha;if(n.Color.equals(e,t)){for(v=0;v<r;v++)a[v]=n.Color.clone(e);return a}for(var y=(p-o)/r,m=(c-i)/r,f=(d-l)/r,h=(u-s)/r,v=0;v<r;v++)a[v]=new n.Color(o+v*y,i+v*m,l+v*f,s+v*h);return a}(S,h[F+1],B),N=U.length,M=0;M<N;++M)G[O++]=U[M];else for(M=0;M<B;++M)G[O++]=n.Color.clone(S)}G[O]=n.Color.clone(h[h.length-1]),h=G,g.length=0}b=C===r.ArcType.GEODESIC?d.PolylinePipeline.generateCartesianArc({positions:b,minDistance:D,ellipsoid:A,height:V}):d.PolylinePipeline.generateCartesianRhumbArc({positions:b,granularity:D,ellipsoid:A,height:V})}A=4*(H=b.length)-4;var H,W,Y,q,z=new Float64Array(3*A),J=new Float64Array(3*A),j=new Float64Array(3*A),K=new Float32Array(2*A),Q=f.st?new Float32Array(2*A):void 0,X=e.defined(h)?new Uint8Array(4*A):void 0,Z=0,$=0,ee=0,te=0;for(M=0;M<H;++M){0===M?(t.Cartesian3.subtract(b[0],b[1],W=P),t.Cartesian3.add(b[0],W,W)):W=b[M-1],t.Cartesian3.clone(W,x),t.Cartesian3.clone(b[M],w),M===H-1?(t.Cartesian3.subtract(b[H-1],b[H-2],W=P),t.Cartesian3.add(b[H-1],W,W)):W=b[M+1],t.Cartesian3.clone(W,T),e.defined(X)&&(Y=0===M||v?h[M]:h[M-1],M!==H-1&&(q=h[M]));for(var re=M===H-1?2:4,ae=0===M?2:0;ae<re;++ae){t.Cartesian3.pack(w,z,Z),t.Cartesian3.pack(x,J,Z),t.Cartesian3.pack(T,j,Z),Z+=3;var oe=ae-2<0?-1:1;K[$++]=ae%2*2-1,K[$++]=oe*m,f.st&&(Q[ee++]=M/(H-1),Q[ee++]=Math.max(K[$-2],0)),e.defined(X)&&(X[te++]=n.Color.floatToByte((oe=ae<2?Y:q).red),X[te++]=n.Color.floatToByte(oe.green),X[te++]=n.Color.floatToByte(oe.blue),X[te++]=n.Color.floatToByte(oe.alpha))}}(V=new p.GeometryAttributes).position=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:z}),V.prevPosition=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:J}),V.nextPosition=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:j}),V.expandAndWidth=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:K}),f.st&&(V.st=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:Q})),e.defined(X)&&(V.color=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:X,normalize:!0}));var ne=c.IndexDatatype.createTypedArray(A,6*H-6),ie=0,le=0,se=H-1;for(M=0;M<se;++M)ne[le++]=ie,ne[le++]=ie+2,ne[le++]=ie+1,ne[le++]=ie+1,ne[le++]=ie+2,ne[le++]=ie+3,ie+=4;return new s.Geometry({attributes:V,indices:ne,primitiveType:s.PrimitiveType.TRIANGLES,boundingSphere:o.BoundingSphere.fromPoints(b),geometryType:s.GeometryType.POLYLINES})}},function(r,a){return(r=e.defined(a)?_.unpack(r,a):r)._ellipsoid=t.Ellipsoid.clone(r._ellipsoid),_.createGeometry(r)}}));