define(["./when-4bbc8319","./Matrix2-ccd5b911","./ArcType-98ec98bf","./Transforms-d5c6ad6e","./Color-d6975cd2","./ComponentDatatype-93750d1a","./RuntimeError-346a3079","./GeometryAttribute-c30799b8","./GeometryAttributes-7827a6c2","./IndexDatatype-b7d979a6","./PolylinePipeline-8457214f","./combine-83860057","./WebGLConstants-1c8239cc","./EllipsoidGeodesic-19ea7553","./EllipsoidRhumbLine-aa9e6266","./IntersectionTests-4d6f5c54","./Plane-18bb00f8"],(function(e,o,t,r,a,l,i,n,s,p,d,c,y,f,u,h,C){"use strict";function T(r){var i=(r=e.defaultValue(r,e.defaultValue.EMPTY_OBJECT)).positions,n=r.colors,s=e.defaultValue(r.colorsPerVertex,!1);this._positions=i,this._colors=n,this._colorsPerVertex=s,this._arcType=e.defaultValue(r.arcType,t.ArcType.GEODESIC),this._granularity=e.defaultValue(r.granularity,l.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=e.defaultValue(r.ellipsoid,o.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry",i=1+i.length*o.Cartesian3.packedLength,i+=e.defined(n)?1+n.length*a.Color.packedLength:1,this.packedLength=i+o.Ellipsoid.packedLength+3}T.pack=function(t,r,l){var i;l=e.defaultValue(l,0);var n=t._positions,s=n.length;for(r[l++]=s,i=0;i<s;++i,l+=o.Cartesian3.packedLength)o.Cartesian3.pack(n[i],r,l);var p=t._colors;s=e.defined(p)?p.length:0;for(r[l++]=s,i=0;i<s;++i,l+=a.Color.packedLength)a.Color.pack(p[i],r,l);return o.Ellipsoid.pack(t._ellipsoid,r,l),l+=o.Ellipsoid.packedLength,r[l++]=t._colorsPerVertex?1:0,r[l++]=t._arcType,r[l]=t._granularity,r},T.unpack=function(t,r,l){r=e.defaultValue(r,0);for(var i=t[r++],n=new Array(i),s=0;s<i;++s,r+=o.Cartesian3.packedLength)n[s]=o.Cartesian3.unpack(t,r);var p=0<(i=t[r++])?new Array(i):void 0;for(s=0;s<i;++s,r+=a.Color.packedLength)p[s]=a.Color.unpack(t,r);var d=o.Ellipsoid.unpack(t,r);r+=o.Ellipsoid.packedLength;var c=1===t[r++],y=t[r++],f=t[r];return e.defined(l)?(l._positions=n,l._colors=p,l._ellipsoid=d,l._colorsPerVertex=c,l._arcType=y,l._granularity=f,l):new T({positions:n,colors:p,ellipsoid:d,colorsPerVertex:c,arcType:y,granularity:f})};var g=new Array(2),m=new Array(2),b={positions:g,height:m,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return T.createGeometry=function(i){var c=i._positions,y=i._colors,f=i._colorsPerVertex,u=i._arcType,h=i._granularity,C=(i=i._ellipsoid,l.CesiumMath.chordLength(h,i.maximumRadius)),T=e.defined(y)&&!f,P=c.length,_=0;if(u===t.ArcType.GEODESIC||u===t.ArcType.RHUMB){var v,B,A=u===t.ArcType.GEODESIC?(v=l.CesiumMath.chordLength(h,i.maximumRadius),B=d.PolylinePipeline.numberOfPoints,d.PolylinePipeline.generateArc):(v=h,B=d.PolylinePipeline.numberOfPointsRhumbLine,d.PolylinePipeline.generateRhumbArc),E=d.PolylinePipeline.extractHeights(c,i),k=b;if(u===t.ArcType.GEODESIC?k.minDistance=C:k.granularity=h,k.ellipsoid=i,T){for(var G=0,w=0;w<P-1;w++)G+=B(c[w],c[w+1],v)+1;O=new Float64Array(3*G),M=new Uint8Array(4*G),k.positions=g,k.height=m;var D=0;for(w=0;w<P-1;++w){g[0]=c[w],g[1]=c[w+1],m[0]=E[w],m[1]=E[w+1];var L=A(k);if(e.defined(y))for(var V=L.length/3,x=y[w],S=0;S<V;++S)M[D++]=a.Color.floatToByte(x.red),M[D++]=a.Color.floatToByte(x.green),M[D++]=a.Color.floatToByte(x.blue),M[D++]=a.Color.floatToByte(x.alpha);O.set(L,_),_+=L.length}}else if(k.positions=c,k.height=E,O=new Float64Array(A(k)),e.defined(y)){for(M=new Uint8Array(O.length/3*4),w=0;w<P-1;++w)_=function(e,o,t,r,l,i,n){var s=d.PolylinePipeline.numberOfPoints(e,o,l),p=t.red,c=t.green,y=t.blue,f=t.alpha,u=r.red;e=r.green,o=r.blue,l=r.alpha;if(a.Color.equals(t,r)){for(b=0;b<s;b++)i[n++]=a.Color.floatToByte(p),i[n++]=a.Color.floatToByte(c),i[n++]=a.Color.floatToByte(y),i[n++]=a.Color.floatToByte(f);return n}for(var h=(u-p)/s,C=(e-c)/s,T=(o-y)/s,g=(l-f)/s,m=n,b=0;b<s;b++)i[m++]=a.Color.floatToByte(p+b*h),i[m++]=a.Color.floatToByte(c+b*C),i[m++]=a.Color.floatToByte(y+b*T),i[m++]=a.Color.floatToByte(f+b*g);return m}(c[w],c[w+1],y[w],y[w+1],C,M,_);var I=y[P-1];M[_++]=a.Color.floatToByte(I.red),M[_++]=a.Color.floatToByte(I.green),M[_++]=a.Color.floatToByte(I.blue),M[_++]=a.Color.floatToByte(I.alpha)}}else{var R=T?2*P-2:P,O=new Float64Array(3*R),M=e.defined(y)?new Uint8Array(4*R):void 0,U=0,N=0;for(w=0;w<P;++w){var F=c[w];if(T&&0<w&&(o.Cartesian3.pack(F,O,U),U+=3,x=y[w-1],M[N++]=a.Color.floatToByte(x.red),M[N++]=a.Color.floatToByte(x.green),M[N++]=a.Color.floatToByte(x.blue),M[N++]=a.Color.floatToByte(x.alpha)),T&&w===P-1)break;o.Cartesian3.pack(F,O,U),U+=3,e.defined(y)&&(x=y[w],M[N++]=a.Color.floatToByte(x.red),M[N++]=a.Color.floatToByte(x.green),M[N++]=a.Color.floatToByte(x.blue),M[N++]=a.Color.floatToByte(x.alpha))}}(I=new s.GeometryAttributes).position=new n.GeometryAttribute({componentDatatype:l.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:O}),e.defined(y)&&(I.color=new n.GeometryAttribute({componentDatatype:l.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:M,normalize:!0})),R=O.length/3;var H=p.IndexDatatype.createTypedArray(R,2*(R-1)),W=0;for(w=0;w<R-1;++w)H[W++]=w,H[W++]=w+1;return new n.Geometry({attributes:I,indices:H,primitiveType:n.PrimitiveType.LINES,boundingSphere:r.BoundingSphere.fromPoints(c)})},function(t,r){return(t=e.defined(r)?T.unpack(t,r):t)._ellipsoid=o.Ellipsoid.clone(t._ellipsoid),T.createGeometry(t)}}));