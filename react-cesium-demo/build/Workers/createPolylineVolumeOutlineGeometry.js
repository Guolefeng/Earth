define(["./when-4bbc8319","./Matrix2-ccd5b911","./arrayRemoveDuplicates-18786327","./BoundingRectangle-2b0e1a9b","./Transforms-d5c6ad6e","./ComponentDatatype-93750d1a","./PolylineVolumeGeometryLibrary-6bb54199","./RuntimeError-346a3079","./GeometryAttribute-c30799b8","./GeometryAttributes-7827a6c2","./IndexDatatype-b7d979a6","./PolygonPipeline-83fb62b0","./combine-83860057","./WebGLConstants-1c8239cc","./EllipsoidTangentPlane-e000bae1","./AxisAlignedBoundingBox-883f9c89","./IntersectionTests-4d6f5c54","./Plane-18bb00f8","./PolylinePipeline-8457214f","./EllipsoidGeodesic-19ea7553","./EllipsoidRhumbLine-aa9e6266"],(function(e,i,n,t,a,o,r,l,s,p,d,c,u,y,g,h,m,f,E,b,v){"use strict";function P(n){var t=(n=e.defaultValue(n,e.defaultValue.EMPTY_OBJECT)).polylinePositions,a=n.shapePositions;this._positions=t,this._shape=a,this._ellipsoid=i.Ellipsoid.clone(e.defaultValue(n.ellipsoid,i.Ellipsoid.WGS84)),this._cornerType=e.defaultValue(n.cornerType,r.CornerType.ROUNDED),this._granularity=e.defaultValue(n.granularity,o.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeOutlineGeometry",t=1+t.length*i.Cartesian3.packedLength,t+=1+a.length*i.Cartesian2.packedLength,this.packedLength=t+i.Ellipsoid.packedLength+2}P.pack=function(n,t,a){var o;a=e.defaultValue(a,0);var r=n._positions,l=r.length;for(t[a++]=l,o=0;o<l;++o,a+=i.Cartesian3.packedLength)i.Cartesian3.pack(r[o],t,a);var s=n._shape;l=s.length;for(t[a++]=l,o=0;o<l;++o,a+=i.Cartesian2.packedLength)i.Cartesian2.pack(s[o],t,a);return i.Ellipsoid.pack(n._ellipsoid,t,a),a+=i.Ellipsoid.packedLength,t[a++]=n._cornerType,t[a]=n._granularity,t};var _=i.Ellipsoid.clone(i.Ellipsoid.UNIT_SPHERE),k={polylinePositions:void 0,shapePositions:void 0,ellipsoid:_,height:void 0,cornerType:void 0,granularity:void 0};P.unpack=function(n,t,a){t=e.defaultValue(t,0);for(var o=n[t++],r=new Array(o),l=0;l<o;++l,t+=i.Cartesian3.packedLength)r[l]=i.Cartesian3.unpack(n,t);o=n[t++];var s=new Array(o);for(l=0;l<o;++l,t+=i.Cartesian2.packedLength)s[l]=i.Cartesian2.unpack(n,t);var p=i.Ellipsoid.unpack(n,t,_);t+=i.Ellipsoid.packedLength;var d=n[t++],c=n[t];return e.defined(a)?(a._positions=r,a._shape=s,a._ellipsoid=i.Ellipsoid.clone(p,a._ellipsoid),a._cornerType=d,a._granularity=c,a):(k.polylinePositions=r,k.shapePositions=s,k.cornerType=d,k.granularity=c,new P(k))};var C=new t.BoundingRectangle;return P.createGeometry=function(e){var l=e._positions,u=n.arrayRemoveDuplicates(l,i.Cartesian3.equalsEpsilon),y=e._shape;y=r.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(y);if(!(u.length<2||y.length<3))return c.PolygonPipeline.computeWindingOrder2D(y)===c.WindingOrder.CLOCKWISE&&y.reverse(),l=t.BoundingRectangle.fromPoints(y,C),function(e,i){var n=new p.GeometryAttributes;n.position=new s.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e});var t=i.length,r=(i=n.position.values.length/3,e.length/3/t),l=d.IndexDatatype.createTypedArray(i,2*t*(1+r)),c=0,u=0,y=u*t;for(m=0;m<t-1;m++)l[c++]=m+y,l[c++]=m+y+1;for(l[c++]=t-1+y,l[c++]=y,y=(u=r-1)*t,m=0;m<t-1;m++)l[c++]=m+y,l[c++]=m+y+1;for(l[c++]=t-1+y,l[c++]=y,u=0;u<r-1;u++)for(var g=t*u,h=g+t,m=0;m<t;m++)l[c++]=m+g,l[c++]=m+h;return new s.Geometry({attributes:n,indices:d.IndexDatatype.createTypedArray(i,l),boundingSphere:a.BoundingSphere.fromVertices(e),primitiveType:s.PrimitiveType.LINES})}(r.PolylineVolumeGeometryLibrary.computePositions(u,y,l,e,!1),y)},function(n,t){return(n=e.defined(t)?P.unpack(n,t):n)._ellipsoid=i.Ellipsoid.clone(n._ellipsoid),P.createGeometry(n)}}));